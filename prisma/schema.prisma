// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole  @default(USER)
  twoFactorSecret   String?
  twoFactorEnabled  Boolean   @default(false)
  blocked           Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  orders      Order[]
  auditLogs   AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?
  image       String?
  parentId    String?
  parent      Category?   @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[]  @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([slug])
  @@index([parentId])
}

model Product {
  id             String        @id @default(cuid())
  name           String
  slug           String        @unique
  description    String?
  sku            String?       @unique
  price          Int           // Precio en centavos ARS
  compareAtPrice Int?          // Precio anterior (para mostrar descuento)
  currency       String        @default("ARS")
  images         String        // JSON string de array de URLs
  stock          Int           @default(0)
  attributes     String?       // JSON string de atributos variables
  status         ProductStatus @default(DRAFT)
  featured       Boolean       @default(false)
  categoryId     String?
  category       Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  orderItems     OrderItem[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([slug])
  @@index([sku])
  @@index([status])
  @@index([categoryId])
  @@index([featured])
}

model Order {
  id              String      @id @default(cuid())
  userId          String?
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  email           String
  status          OrderStatus @default(PENDING)
  currency        String      @default("ARS")
  subtotal        Int         // En centavos
  shipping        Int         @default(0)
  discount        Int         @default(0)
  totalAmount     Int         // En centavos
  mpPreferenceId  String?     @unique
  mpPaymentId     String?     @unique
  timeline        String?     // JSON string de array de eventos
  shippingAddress String?     // JSON string de dirección
  billingAddress  String?     // JSON string de dirección de facturación
  customerData    String?     // JSON string de datos del cliente
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
  @@index([email])
  @@index([status])
  @@index([mpPaymentId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  name      String
  sku       String?
  unitPrice Int      // En centavos
  quantity  Int
  image     String?
  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // CREATE, UPDATE, DELETE
  entity    String   // Product, Order, User, etc.
  entityId  String
  actorId   String?
  actor     User?    @relation(fields: [actorId], references: [id], onDelete: SetNull)
  changes   Json?    // Diff de cambios
  metadata  Json?    // Info adicional
  createdAt DateTime @default(now())

  @@index([actorId])
  @@index([entity, entityId])
  @@index([createdAt])
}
